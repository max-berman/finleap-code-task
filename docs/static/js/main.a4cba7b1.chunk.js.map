{"version":3,"sources":["components/DropDown/DropDown.js","components/SearchResults/SearchResults.js","config.js","cities.js","components/SearchInput/SearchInput.js","api/index.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["List","userInput","showDropDown","filteredOptions","handleItemClick","activeOption","length","className","data-testid","map","i","name","id","key","onClick","SearchResults","cityList","setCityList","sort","x","y","temp_max","temp","temp_min","itemId","filter","API_KEY","URL","STRINGS","title","input_placeholder","error","CITIES","SearchInput","setUserInput","setShowDropDown","setActiveOption","setFilteredOptions","useEffect","console","log","type","value","onChange","target","res","toLowerCase","indexOf","onKeyDown","e","keyCode","placeholder","fetchCity","cityID","fetch","then","response","json","uniqueBy","a","Set","o","JSON","stringify","s","parse","App","useState","isError","setIsError","isLoading","setIsLoading","store","main","prevState","catch","err","onSubmit","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a4cba7b1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nexport default function List({\n  userInput,\n  showDropDown,\n  filteredOptions,\n  handleItemClick,\n  activeOption,\n}) {\n  return (\n    showDropDown &&\n    userInput &&\n    filteredOptions.length && (\n      <ul className='dropDownList' data-testid='dropDown'>\n        {filteredOptions.map(({ name, id }, i) => (\n          <li\n            key={i}\n            onClick={() => handleItemClick(id)}\n            className={i === activeOption ? 'active' : ''}\n          >\n            {name}\n          </li>\n        ))}\n      </ul>\n    )\n  )\n}\n","import React from 'react'\n\nexport default function SearchResults({ cityList = [], setCityList }) {\n  function handleOnClick(itemId) {\n    setCityList(cityList.filter(({ id }) => itemId !== id))\n  }\n  function className(temp) {\n    return temp > 20 ? 'hot' : temp >= 5 && temp <= 20 ? 'mild' : 'cold'\n  }\n\n  return (\n    cityList.length > 0 && (\n      <section className='cards'>\n        {cityList\n          .sort((x, y) => +y.temp_max - +x.temp_max)\n          .map(({ id, name, temp_max, temp_min }, key) => (\n            <dl className={`${className(temp_max)} card`} key={key}>\n              <dd className='close' onClick={() => handleOnClick(id)} />\n              <dt>{name}</dt>\n              <dd>\n                <span>min:</span> {temp_max}\n              </dd>\n              <dd>\n                <span>max:</span> {temp_min}\n              </dd>\n            </dl>\n          ))}\n      </section>\n    )\n  )\n}\n","export const API_KEY = '483d38b97955379402481e30fc952921'\nexport const URL = 'https://api.openweathermap.org/data/2.5/weather'\n\nexport const STRINGS = {\n  title: 'weather monster',\n  input_placeholder: 'Type city name',\n  error: 'Problem with Loading Data...'\n}\n","export const CITIES = [\n  { id: 6173331, name: 'Vancouver' },\n  { id: 293396, name: 'Tel Aviv' },\n  { id: 5128638, name: 'New York' },\n  { id: 2950159, name: 'Berlin' },\n  { id: 3648559, name: 'Barcelona' },\n  { id: 5172078, name: 'Sidney' },\n  { id: 5174095, name: 'Toronto' },\n  { id: 7839805, name: 'Melbourne' },\n  { id: 4717560, name: 'Paris' },\n  { id: 3369157, name: 'Cape Town' },\n  { id: 6458924, name: 'Porto' },\n  { id: 2759794, name: 'Amsterdam' }\n]\n","import React, { useEffect } from 'react'\nimport { STRINGS } from '../../config'\nimport { CITIES } from '../../cities'\n// https://codesandbox.io/s/ojr02w7x55?from-embed=&file=/src/Autocomplete.js\n\nexport default function SearchInput({\n  userInput,\n  setUserInput,\n  setShowDropDown,\n  showDropDown,\n  activeOption,\n  setActiveOption,\n  filteredOptions,\n  setFilteredOptions,\n  handleItemClick,\n}) {\n  useEffect(() => {\n    console.log(activeOption)\n  }, [activeOption])\n\n  function handleChange({ target: { value } }) {\n    setUserInput(value)\n    setShowDropDown(true)\n    setFilteredOptions(\n      CITIES.filter(\n        (res) => res.name.toLowerCase().indexOf(value.toLowerCase()) > -1\n      )\n    )\n  }\n  function onKeyDown(e) {\n    const { keyCode } = e\n    console.log(filteredOptions[activeOption])\n    if (keyCode === 13) {\n      setActiveOption(0)\n      setUserInput(filteredOptions[activeOption].name)\n      handleItemClick(filteredOptions[activeOption].id)\n      setShowDropDown(false)\n    } else if (keyCode === 38) {\n      if (activeOption === 0) {\n        return\n      }\n      setActiveOption(activeOption - 1)\n    } else if (keyCode === 40) {\n      if (activeOption === filteredOptions.length - 1) {\n        return\n      }\n      setActiveOption(activeOption + 1)\n    }\n  }\n\n  return (\n    <div>\n      <input\n        type='text'\n        value={userInput}\n        onChange={handleChange}\n        onKeyDown={onKeyDown}\n        placeholder={STRINGS.input_placeholder}\n        data-testid='searchInput'\n      />\n    </div>\n  )\n}\n","import { URL, API_KEY } from '../config'\n\nfunction fetchCity(cityID) {\n  return fetch(\n    `${URL}?id=${cityID}&units=metric&appid=${API_KEY}`\n  ).then(response => response.json())\n}\nexport default fetchCity\n","const unique = (value, index, self) => {\n  return self.indexOf(value) === index\n}\nconst uniqueBy = a =>\n  [...new Set(a.map(o => JSON.stringify(o)))].map(s => JSON.parse(s))\n\nexport { unique, uniqueBy }\n","import React, { useState } from 'react'\nimport DropDown from './components/DropDown/DropDown'\nimport SearchResults from './components/SearchResults/SearchResults'\nimport SearchInput from './components/SearchInput/SearchInput'\nimport './App.css'\nimport { STRINGS } from '../src/config'\nimport fetchCity from './api/index'\nimport { uniqueBy } from './utils'\n\nconst { error, title } = STRINGS\n\nfunction App() {\n  const [userInput, setUserInput] = useState('')\n  const [showDropDown, setShowDropDown] = useState(false)\n  const [cityList, setCityList] = useState([])\n  const [isError, setIsError] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const [activeOption, setActiveOption] = useState(0)\n  const [filteredOptions, setFilteredOptions] = useState([])\n\n  function handleItemClick(id) {\n    setIsLoading(true)\n    return fetchCity(id)\n      .then(({ id, main: { temp_max, temp_min }, name }) => {\n        setCityList((prevState) =>\n          uniqueBy([\n            ...prevState,\n            {\n              id,\n              name,\n              temp_max,\n              temp_min,\n            },\n          ])\n        )\n        setUserInput(name)\n      })\n      .then(() => {\n        setShowDropDown(!showDropDown)\n        setIsLoading(false)\n      })\n      .catch((err) => setIsError(true))\n  }\n\n  const store = {\n    userInput,\n    setUserInput,\n    showDropDown,\n    setShowDropDown,\n    cityList,\n    setCityList,\n    setIsError,\n    setIsLoading,\n    activeOption,\n    setActiveOption,\n    filteredOptions,\n    setFilteredOptions,\n    handleItemClick,\n  }\n\n  return (\n    <div className='App'>\n      <h1>{title}</h1>\n      <form onSubmit={(e) => e.preventDefault()} className='search'>\n        <SearchInput {...store} />\n        {isLoading && !isError && <span className='spinner' />}\n        <DropDown {...store} />\n      </form>\n      {isError ? <span>{error}</span> : <SearchResults {...store} />}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}